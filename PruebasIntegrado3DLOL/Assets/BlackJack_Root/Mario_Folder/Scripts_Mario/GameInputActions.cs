//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/BlackJack_Root/Mario_Folder/Scripts_Mario/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""XboxControl"",
            ""id"": ""59aa31d1-58dc-4636-b7b6-0decd1ecfc6b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""61542743-bdf3-43f0-891d-96ad37d4aaad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b07dfeca-8236-48a2-aeaa-61bbde47fbe1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0a81a34a-473a-46cc-9665-b3adac48fb17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9f4a851f-adf8-4ea5-b8d6-010dd8b6e807"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""78138d08-715c-4982-bd6b-5722aa8485a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SitOnObject"",
                    ""type"": ""Button"",
                    ""id"": ""aec1fb8e-841c-4a67-a321-a7bb3a77ba48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10b985e4-eec7-4f74-8b20-fc36610cb276"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5c65dd39-00c1-4afb-81f2-1c9ca1987a2d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9333c53e-453e-4b18-8c76-43705ecb2e2c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""50372d95-ce23-4358-9c90-cdfc58319ab4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eceb5b99-03f2-4993-b972-2a77196097a3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""51762a47-3c49-44c1-bf29-95617df2a406"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02bcfc2c-72e5-47b3-9a5c-e2a3b234769c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ddfbf73-bb56-4f2e-a295-39386f589547"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""586d925e-e1b7-48aa-857e-357d4724971c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3fbc19d9-8dd8-470e-b468-a2d92203d9c2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b9e945b-0170-4f03-9ba9-196dec201bb2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c1c142e-c6aa-4f6c-82ce-885e0af3d19e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=2,y=2)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3227f7c-63b0-47df-9369-44d44fae4fc9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d8c411b-5911-473b-8a9f-e93ae52d9b56"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0964da34-2ad4-49ea-a960-984b55a98fb0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38f70ce0-50f3-45d7-9103-f4394c5f0ba7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b74aad59-7f90-482c-87d6-92f650b018d6"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba2f5651-e43e-4f7a-8a0c-47c03bcad921"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24c4d4a3-2043-4da7-b06d-66a65a740556"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SitOnObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SlotMachine"",
            ""id"": ""4fd9add5-caea-43a0-82e4-2f1c4e829613"",
            ""actions"": [
                {
                    ""name"": ""PullHandle"",
                    ""type"": ""Button"",
                    ""id"": ""b6722d02-553d-4ea3-b17f-2f8e100068f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ef743f9-da58-4b31-b541-86c942612426"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullHandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56289c41-e0f3-48df-93ba-e9b72e586fc1"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullHandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XboxControl
        m_XboxControl = asset.FindActionMap("XboxControl", throwIfNotFound: true);
        m_XboxControl_Move = m_XboxControl.FindAction("Move", throwIfNotFound: true);
        m_XboxControl_Look = m_XboxControl.FindAction("Look", throwIfNotFound: true);
        m_XboxControl_Interact = m_XboxControl.FindAction("Interact", throwIfNotFound: true);
        m_XboxControl_Jump = m_XboxControl.FindAction("Jump", throwIfNotFound: true);
        m_XboxControl_Sprint = m_XboxControl.FindAction("Sprint", throwIfNotFound: true);
        m_XboxControl_SitOnObject = m_XboxControl.FindAction("SitOnObject", throwIfNotFound: true);
        // SlotMachine
        m_SlotMachine = asset.FindActionMap("SlotMachine", throwIfNotFound: true);
        m_SlotMachine_PullHandle = m_SlotMachine.FindAction("PullHandle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XboxControl
    private readonly InputActionMap m_XboxControl;
    private List<IXboxControlActions> m_XboxControlActionsCallbackInterfaces = new List<IXboxControlActions>();
    private readonly InputAction m_XboxControl_Move;
    private readonly InputAction m_XboxControl_Look;
    private readonly InputAction m_XboxControl_Interact;
    private readonly InputAction m_XboxControl_Jump;
    private readonly InputAction m_XboxControl_Sprint;
    private readonly InputAction m_XboxControl_SitOnObject;
    public struct XboxControlActions
    {
        private @GameInputActions m_Wrapper;
        public XboxControlActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_XboxControl_Move;
        public InputAction @Look => m_Wrapper.m_XboxControl_Look;
        public InputAction @Interact => m_Wrapper.m_XboxControl_Interact;
        public InputAction @Jump => m_Wrapper.m_XboxControl_Jump;
        public InputAction @Sprint => m_Wrapper.m_XboxControl_Sprint;
        public InputAction @SitOnObject => m_Wrapper.m_XboxControl_SitOnObject;
        public InputActionMap Get() { return m_Wrapper.m_XboxControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XboxControlActions set) { return set.Get(); }
        public void AddCallbacks(IXboxControlActions instance)
        {
            if (instance == null || m_Wrapper.m_XboxControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XboxControlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @SitOnObject.started += instance.OnSitOnObject;
            @SitOnObject.performed += instance.OnSitOnObject;
            @SitOnObject.canceled += instance.OnSitOnObject;
        }

        private void UnregisterCallbacks(IXboxControlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @SitOnObject.started -= instance.OnSitOnObject;
            @SitOnObject.performed -= instance.OnSitOnObject;
            @SitOnObject.canceled -= instance.OnSitOnObject;
        }

        public void RemoveCallbacks(IXboxControlActions instance)
        {
            if (m_Wrapper.m_XboxControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXboxControlActions instance)
        {
            foreach (var item in m_Wrapper.m_XboxControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XboxControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XboxControlActions @XboxControl => new XboxControlActions(this);

    // SlotMachine
    private readonly InputActionMap m_SlotMachine;
    private List<ISlotMachineActions> m_SlotMachineActionsCallbackInterfaces = new List<ISlotMachineActions>();
    private readonly InputAction m_SlotMachine_PullHandle;
    public struct SlotMachineActions
    {
        private @GameInputActions m_Wrapper;
        public SlotMachineActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PullHandle => m_Wrapper.m_SlotMachine_PullHandle;
        public InputActionMap Get() { return m_Wrapper.m_SlotMachine; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SlotMachineActions set) { return set.Get(); }
        public void AddCallbacks(ISlotMachineActions instance)
        {
            if (instance == null || m_Wrapper.m_SlotMachineActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SlotMachineActionsCallbackInterfaces.Add(instance);
            @PullHandle.started += instance.OnPullHandle;
            @PullHandle.performed += instance.OnPullHandle;
            @PullHandle.canceled += instance.OnPullHandle;
        }

        private void UnregisterCallbacks(ISlotMachineActions instance)
        {
            @PullHandle.started -= instance.OnPullHandle;
            @PullHandle.performed -= instance.OnPullHandle;
            @PullHandle.canceled -= instance.OnPullHandle;
        }

        public void RemoveCallbacks(ISlotMachineActions instance)
        {
            if (m_Wrapper.m_SlotMachineActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISlotMachineActions instance)
        {
            foreach (var item in m_Wrapper.m_SlotMachineActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SlotMachineActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SlotMachineActions @SlotMachine => new SlotMachineActions(this);
    public interface IXboxControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnSitOnObject(InputAction.CallbackContext context);
    }
    public interface ISlotMachineActions
    {
        void OnPullHandle(InputAction.CallbackContext context);
    }
}
