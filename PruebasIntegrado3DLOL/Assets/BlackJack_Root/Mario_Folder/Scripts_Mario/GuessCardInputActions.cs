//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/BlackJack_Root/Mario_Folder/Scripts_Mario/GuessCardInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GuessCardInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GuessCardInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GuessCardInputActions"",
    ""maps"": [
        {
            ""name"": ""GuessTheCardGame"",
            ""id"": ""0ed6684f-440c-4913-9a10-e11a8587db21"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""Value"",
                    ""id"": ""c5a10444-f97a-42fa-953a-6b6cb6500b78"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submition"",
                    ""type"": ""Button"",
                    ""id"": ""93c5ceee-3aa9-4cf1-b52e-1e2acff6d520"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bet"",
                    ""type"": ""Button"",
                    ""id"": ""2d52cdb6-3c0b-42ab-a265-d88bf3541299"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""301da584-1e60-4881-9552-3127ecc9f276"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerClick"",
                    ""type"": ""Button"",
                    ""id"": ""bd89c743-520e-4fcd-a859-d16f641a4855"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""644baaea-ff1d-47b0-a311-fdd78399bf62"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49117d51-e1f6-486c-80c2-7ccfd5b5090a"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c0d0318d-a4ba-4172-8bce-043ebf48d858"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""be36e72d-d80d-45a2-b0fb-5f5fe2ebb25c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b64dca95-6676-4298-9264-bdc10ab1e565"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9068e7ca-5efd-44d3-89ba-ddb68ed750b3"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""419e4071-ef87-4ba3-bb2f-db9386964bff"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae161ef8-9d9d-4382-9dbd-af7022e1b0e9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91f1efa5-4b05-4f93-aa4b-1db823dfabbf"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a37afc56-7ee6-4a82-b175-4c27989c782d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GuessTheCardGame
        m_GuessTheCardGame = asset.FindActionMap("GuessTheCardGame", throwIfNotFound: true);
        m_GuessTheCardGame_Navigation = m_GuessTheCardGame.FindAction("Navigation", throwIfNotFound: true);
        m_GuessTheCardGame_Submition = m_GuessTheCardGame.FindAction("Submition", throwIfNotFound: true);
        m_GuessTheCardGame_Bet = m_GuessTheCardGame.FindAction("Bet", throwIfNotFound: true);
        m_GuessTheCardGame_PointerMovement = m_GuessTheCardGame.FindAction("PointerMovement", throwIfNotFound: true);
        m_GuessTheCardGame_PointerClick = m_GuessTheCardGame.FindAction("PointerClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GuessTheCardGame
    private readonly InputActionMap m_GuessTheCardGame;
    private List<IGuessTheCardGameActions> m_GuessTheCardGameActionsCallbackInterfaces = new List<IGuessTheCardGameActions>();
    private readonly InputAction m_GuessTheCardGame_Navigation;
    private readonly InputAction m_GuessTheCardGame_Submition;
    private readonly InputAction m_GuessTheCardGame_Bet;
    private readonly InputAction m_GuessTheCardGame_PointerMovement;
    private readonly InputAction m_GuessTheCardGame_PointerClick;
    public struct GuessTheCardGameActions
    {
        private @GuessCardInputActions m_Wrapper;
        public GuessTheCardGameActions(@GuessCardInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigation => m_Wrapper.m_GuessTheCardGame_Navigation;
        public InputAction @Submition => m_Wrapper.m_GuessTheCardGame_Submition;
        public InputAction @Bet => m_Wrapper.m_GuessTheCardGame_Bet;
        public InputAction @PointerMovement => m_Wrapper.m_GuessTheCardGame_PointerMovement;
        public InputAction @PointerClick => m_Wrapper.m_GuessTheCardGame_PointerClick;
        public InputActionMap Get() { return m_Wrapper.m_GuessTheCardGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GuessTheCardGameActions set) { return set.Get(); }
        public void AddCallbacks(IGuessTheCardGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GuessTheCardGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GuessTheCardGameActionsCallbackInterfaces.Add(instance);
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
            @Submition.started += instance.OnSubmition;
            @Submition.performed += instance.OnSubmition;
            @Submition.canceled += instance.OnSubmition;
            @Bet.started += instance.OnBet;
            @Bet.performed += instance.OnBet;
            @Bet.canceled += instance.OnBet;
            @PointerMovement.started += instance.OnPointerMovement;
            @PointerMovement.performed += instance.OnPointerMovement;
            @PointerMovement.canceled += instance.OnPointerMovement;
            @PointerClick.started += instance.OnPointerClick;
            @PointerClick.performed += instance.OnPointerClick;
            @PointerClick.canceled += instance.OnPointerClick;
        }

        private void UnregisterCallbacks(IGuessTheCardGameActions instance)
        {
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
            @Submition.started -= instance.OnSubmition;
            @Submition.performed -= instance.OnSubmition;
            @Submition.canceled -= instance.OnSubmition;
            @Bet.started -= instance.OnBet;
            @Bet.performed -= instance.OnBet;
            @Bet.canceled -= instance.OnBet;
            @PointerMovement.started -= instance.OnPointerMovement;
            @PointerMovement.performed -= instance.OnPointerMovement;
            @PointerMovement.canceled -= instance.OnPointerMovement;
            @PointerClick.started -= instance.OnPointerClick;
            @PointerClick.performed -= instance.OnPointerClick;
            @PointerClick.canceled -= instance.OnPointerClick;
        }

        public void RemoveCallbacks(IGuessTheCardGameActions instance)
        {
            if (m_Wrapper.m_GuessTheCardGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGuessTheCardGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GuessTheCardGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GuessTheCardGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GuessTheCardGameActions @GuessTheCardGame => new GuessTheCardGameActions(this);
    public interface IGuessTheCardGameActions
    {
        void OnNavigation(InputAction.CallbackContext context);
        void OnSubmition(InputAction.CallbackContext context);
        void OnBet(InputAction.CallbackContext context);
        void OnPointerMovement(InputAction.CallbackContext context);
        void OnPointerClick(InputAction.CallbackContext context);
    }
}
